#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <sstream>
#include <iomanip>
#include <map>
#include <cstdlib>
#include <iterator>
#include <algorithm>
#include <cmath>

#ifndef WIDTH	
#define WIDTH 16
#endif // !WIDTH
#ifndef PRECISION
#define PRECISION 8
#endif // !PRECISION
#ifndef PRECISION2
#define PRECISION2 3
#endif // !PRECISION2
#ifndef e
#define e 2.7182818284590
#endif // !e



using namespace std;

double closest(std::vector<double> const& vec, double value) {
	auto const it = std::lower_bound(vec.begin(), vec.end(), value);
	if (it == vec.end()) { return -1; }
	return *it;
}

int main() {

	typedef std::vector<vector<double>> Matrix;
	typedef std::vector<double> Vector;
	double MINF; //Lower limit og magnitude given in the tabl
	double MSUP; //Upper limit of magnitude given in the table
	int NMAG; //Number of magnitudes for which intensity is given
	double DMAG;
	double RINF; //Lower limit of distance given in the table
	double RSUP; //Upper limit of distance given in the table
	int NRAD; //Number of distances for which intensity is given
	double TYPEMD; //An integer indicating the type of distance used by the attenuation table
	double DLRAD;
	double sigma = 0.7;
	double AMAX = 0; //Type of stadistic distribution
	double V30 = 800;//Shear wave velocity
	double STRESS=120;//Stress asked
	double STRESSI;//Inicial stress
	char OPTION;
					
//--- ATTENUATION VARIABLES ----
	Vector periodsreq;
	Vector frequenciesreq;
	double aux1, aux2;

	//-------------------------------

	ifstream periods;
	periods.open("C:/Users/Hugo Ninnanya/Documents/GibHub/aninanya/BOORE/BOORE/data/silva2002/periods.txt");

	//If we can read/write great
	while (periods.good())
	{
		periods >> aux1;
		periodsreq.push_back(aux1);
	}

#if 0
	for (size_t i = 0; i < periodsreq.size(); i++)
	{
		cout << periodsreq[i] << endl;
	}

#endif // 0

	for (size_t i = 0; i < periodsreq.size(); i++) // Changing periods to frequencies
	{
		aux2 = 1 / periodsreq.at(i);
		frequenciesreq.push_back(aux2);
	}
#if 0
	cout << periodsreq.size() << " " << frequenciesreq.size() << endl;
	for (size_t i = 0; i < frequenciesreq.size(); i++)
	{
		cout << frequenciesreq[i] << endl;
	}
#endif // 1


	// ---------------------------------- ASKING FOR DATA ------------------------------------------------

	//::std::cout << "Enter the minimum magnitude, maximum and the number of intermediate quantities: " << endl;
	//cin >> MINF >> MSUP >> NMAG;
	MINF = 3.5;
	MSUP = 8.0;
	NMAG = 10;
	//cout << "Enter the minimum distance, maximum and the number of intermediate distances: " << endl;
	//cin >> RINF >> RSUP >> NRAD;
	RINF = 1.0;
	RSUP = 1000.0;
	NRAD = 10000;

	cout << "CHOOSE THE TYPE OF REGRESSION COEFFICIENTS: "<<endl;
	cout << "-Single corner with constant stress drop (A)" << endl;
	cout << "-Single corner model with constant stress drop and saturation (B)" << endl;
	cout << "-Double corner model (C)" << endl;
	cout << "-Double corner model with saturation (D)" << endl;
	cin >> OPTION;

	// -------------------------------------- FINISH ------------------------------------------------------



	//-------------------------------- GENERATING COEFICENTS -----------------------------------------------
	Matrix results(periodsreq.size());//Vertical size of Matrix
	Matrix table3(27);//SILVA02, Table 3
	Matrix table4(27);//SILVA02, Table 4
	Matrix table5(27);//SILVA02, Table 5
	Matrix table6(27);//SILVA02, Table 6
	Vector coficentesreq(8);
	int index1, index2;//Positions to interpolate

	ifstream silva2002;
	Vector f3(27);//Vector of table 3's frequencies
	Vector f4(27);//Vector of table 4's frequencies
	Vector f5(27);//Vector of table 5's frequencies
	Vector f6(27);//Vector of table 6's frequencies
	Vector coef(11);
	double nearfrequency;
	double required;

	switch (OPTION)
	{
	case 'A':
		silva2002.open("C:/Users/Hugo Ninnanya/Documents/GibHub/aninanya/BOORE/BOORE/data/silva2002/table3.txt");
		if (silva2002.good())
		{
			for (size_t i = 0; i < 27; i++) {
				for (size_t j = 0; j < 11; j++)	silva2002 >> coef.at(j);
				table3.at(i) = coef;
			}
		}


		for (size_t i = 0; i < 27; i++)
			f3.at(i) = table3.at(i).at(0);

#if 0
		cout << "Table 3 (Silva et al., 2002)" << endl;
		for (size_t i = 0; i < 27; i++) {
			for (size_t j = 0; j < 11; j++)	cout << setw(WIDTH) << table3.at(i).at(j);
			cout << endl;
		}
		cout << endl;

		for (size_t i = 0; i < frequenciesreq.size(); i++)
			cout << frequenciesreq.at(i) << endl;


#endif // 0

		for (size_t i = 0; i < frequenciesreq.size(); i++)
		{
			required = frequenciesreq[i];
			if (required == 105.0) {
				for (size_t j = 0; j < 8; j++)	coficentesreq.at(j) = table3.at(26).at(j + 1);
				results.at(i) = coficentesreq;
			}
			else {
				nearfrequency = closest(f3, required);
				std::vector<double>::iterator it = std::find(f3.begin(), f3.end(), nearfrequency);
				index1 = std::distance(f3.begin(), it);

				if ((nearfrequency <= required))
				{
					if (index1 == 26) { index2 = index1 - 1; }
					else { index2 = index1 + 1; }
				}

				if ((nearfrequency >= required))
				{
					if (index1 == 0) { index2 = index1 + 1; }
					else { index2 = index1 - 1; }
				}
			}


#if 0
			cout << index1 << " " << index2 << endl;
#endif // 0


			for (size_t j = 0; j < 8; j++)
			{
				coficentesreq.at(j) = (((frequenciesreq[i] - table3.at(index1).at(0))*table3.at(index2).at(j + 1)) + ((table3.at(index2).at(0) - frequenciesreq[i])*table3.at(index1).at(j + 1))) / (table3.at(index2).at(0) - table3.at(index1).at(0));
			}
			results.at(i) = coficentesreq;

		}
		cout << "THE END" << endl;
		break;
	case 'B':
		silva2002.open("C:/Users/Hugo Ninnanya/Documents/GibHub/aninanya/BOORE/BOORE/data/silva2002/table4.txt");

		break;
	case'C':
		silva2002.open("C:/Users/Hugo Ninnanya/Documents/GibHub/aninanya/BOORE/BOORE/data/silva2002/table5.txt");

			break;
	case 'D':
		silva2002.open("C:/Users/Hugo Ninnanya/Documents/GibHub/aninanya/BOORE/BOORE/data/silva2002/table6.txt");

		break;
	default:
		cout << "Choose another one" << endl;
		break;

	}











	//--------------------------------------- FINISH -------------------------------------------------------

	//-------------------------- CHECKING ----------------------------------------
#if 0
	for (size_t i = 0; i < frequenciesreq.size(); i++)
	{
		for (size_t j = 0; j < 10; j++)
			cout << setw(WIDTH) << setprecision(4) << results.at(i).at(j);
		cout << endl;
	}
#endif // 0
	//----------------------- FINISH CHECKING -------------------------------------

	//---------------------- GENERATING VALUES -------------------------------

	Vector aceleraciones(NRAD);
	Vector distances(NRAD);
	Vector magnitudes(NMAG);
	DMAG = (MSUP - MINF) / (NMAG - 1);
	DLRAD = (log10(RSUP) - log10(RINF)) / (NRAD - 1);


	for (size_t i = 0; i < NRAD; i++)
	{
		distances[i] = pow(10, log10(RINF) + i*DLRAD);
	}
	distances[NRAD - 1] = RSUP; //Changing last value
	for (size_t i = 0; i < NMAG; i++)
	{
		magnitudes[i] = MINF + i*DMAG;
	}
	magnitudes[NMAG - 1] = MSUP;//Changing last value

	//---------------------------- FINISH -----------------------------------

	//---------------------------- OUTPUT -----------------------------------
	//Value Type of distance
	//	1 (or blank) Focal
	//	2 Epicentral
	//	3 Joyner and Boore
	//	4 Closest to rupture area(Rrup)
	TYPEMD = 4;
#if 0
	cout << "MAGNITUDES:" << endl;
	for (size_t i = 0; i < NMAG; i++)
	{
		cout << magnitudes[i] << endl;
	}
	cout << endl;
#endif // 0
#if 0
	cout << "DISTANCES:" << endl;
	for (size_t i = 0; i < NRAD; i++)
	{
		cout << distances[i] << endl;
	}
	cout << endl;
#endif // 0

	system("pause");
	return 0;
}