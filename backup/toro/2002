#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <sstream>
#include <iomanip>
#include <map>
#include <cstdlib>
#include <iterator>
#include <algorithm>
#include <cmath>

#ifndef WIDTH	
#define WIDTH 16
#endif // !WIDTH
#ifndef PGA
#define PGA 100.0
#endif // !PGA

#ifndef PRECISION
#define PRECISION 8
#endif // !PRECISION
#ifndef PRECISION2
#define PRECISION2 3
#endif // !PRECISION2
#ifndef e
#define e 2.7182818284590
#endif // !e



using namespace std;

double closest(std::vector<double> const& vec, double value) {
	auto const it = std::lower_bound(vec.begin(), vec.end(), value);
	if (it == vec.end()) { return -1; }
	return *it;
}

int main() {

	typedef std::vector<vector<double>> Matrix;
	typedef std::vector<double> Vector;
	double R;
	double MINF; //Lower limit og magnitude given in the tabl
	double MSUP; //Upper limit of magnitude given in the table
	int NMAG; //Number of magnitudes for which intensity is given
	double DMAG;
	double RINF; //Lower limit of distance given in the table
	double RSUP; //Upper limit of distance given in the table
	int NRAD; //Number of distances for which intensity is given
	int TYPEMD; //An integer indicating the type of distance used by the attenuation table
	double DLRAD;
	double sigma = 0.7;
	double AMAX = 0; //Type of stadistic distribution

	double STRESSI;//Inicial stress
	char OPTION1, OPTION2;

	//--- ATTENUATION VARIABLES ----
	Vector periodsreq;
	Vector frequenciesreq;
	double aux1, aux2;
	double A, B, C, D, E, F;
	//-------------------------------

	ifstream periods;
	periods.open("C:/Users/Hugo Ninnanya/Documents/GibHub/aninanya/BOORE/BOORE/data/toro02/periods.txt");

	//If we can read/write great
	while (periods.good())
	{
		periods >> aux1;
		periodsreq.push_back(aux1);
	}

#if 0
	for (size_t i = 0; i < periodsreq.size(); i++)
	{
		cout << periodsreq[i] << endl;
	}

#endif // 0

	for (size_t i = 0; i < periodsreq.size(); i++) // Changing periods to frequencies
	{
		aux2 = 1 / periodsreq.at(i);
		frequenciesreq.push_back(aux2);
	}
#if 0
	cout << periodsreq.size() << " " << frequenciesreq.size() << endl;
	for (size_t i = 0; i < frequenciesreq.size(); i++)
	{
		cout << frequenciesreq[i] << endl;
	}
#endif // 1


	// ---------------------------------- ASKING FOR DATA ------------------------------------------------

	//Enter the minimum magnitude, maximum and the number of intermediate quantities
	MINF = 5.0;
	MSUP = 8.0;
	NMAG = 11;
	//Enter the minimum distance, maximum and the number of intermediate distances
	RINF = 1.0;
	RSUP = 500.0;
	NRAD = 10000;

	cout << "CHOOSE THE TYPE OF COEFFICIENTS: " << endl;
	cout << "-Midcontinent, equations using Moment Magnitude (A)" << endl;
	cout << "-Gulfcontinent, equations using Moment Magnitude (B)" << endl;
	cin >> OPTION1;
	cout << endl;
	cout << "CHOOSE THE TYPE OF APPROACH: " << endl;
	cout << "-Empirical approach - Rjb (A)" << endl;
	cout << "-Modelling approach - Rrup (B)" << endl;
	cin >> OPTION2;

	// -------------------------------------- FINISH ------------------------------------------------------



	//-------------------------------- GENERATING COEFICENTS -----------------------------------------------
	Matrix results(periodsreq.size());//Vertical size of Matrix
	Matrix table2(8);//T02, Table 2 required
	Vector coficentesreq(15);
	int index1 = 0, index2 = 0;//Positions to interpolate

	ifstream toro2002;
	ofstream coefT2; // Archive
	Vector f2(8);
	Vector coef(16);
	double nearfrequency;
	double required;

#if 1

	switch (OPTION1)
	{
	case 'A':
		toro2002.open("C:/Users/Hugo Ninnanya/Documents/GibHub/aninanya/BOORE/BOORE/data/toro02/table2mcmm.txt");
		if (toro2002.good())
		{
			for (size_t i = 0; i < 8; i++) {
				for (size_t j = 0; j < 16; j++)	toro2002 >> coef.at(j);
				table2.at(i) = coef;
			}
		}
		break;
	case 'B':
		toro2002.open("C:/Users/Hugo Ninnanya/Documents/GibHub/aninanya/BOORE/BOORE/data/toro02/table2gulfmm.txt");
		if (toro2002.good())
		{
			for (size_t i = 0; i < 8; i++) {
				for (size_t j = 0; j < 16; j++)	toro2002 >> coef.at(j);
				table2.at(i) = coef;
			}
		}
		break;
	
	}

	
	for (size_t i = 0; i < 8; i++)
		f2.at(i) = table2.at(i).at(0);

#if 0
	cout << "Table 2 (Toro et al., 1997)" << endl;
	for (size_t i = 0; i < 8; i++) {
		for (size_t j = 0; j < 16; j++)	cout << setw(WIDTH) << table2.at(i).at(j);
		cout << endl;
	}
	cout << endl;

	for (size_t i = 0; i < frequenciesreq.size(); i++)
		cout << frequenciesreq.at(i) << endl;


#endif // 0

	for (size_t i = 0; i < frequenciesreq.size(); i++)
	{
		required = frequenciesreq[i];
		if (required >= PGA) {
			periodsreq[i]=0.0;
			for (size_t j = 0; j < 15; j++)	coficentesreq.at(j) = table2.at(7).at(j + 1);
			results.at(i) = coficentesreq;
		}
		else {
			nearfrequency = closest(f2, required);
			std::vector<double>::iterator it = std::find(f2.begin(), f2.end(), nearfrequency);
			index1 = std::distance(f2.begin(), it);

			if ((nearfrequency <= required))
			{
				if (index1 == 7) { index2 = index1 - 1; }
				else { index2 = index1 + 1; }
			}

			if ((nearfrequency >= required))
			{
				if (index1 == 0) { index2 = index1 + 1; }
				else { index2 = index1 - 1; }
			}

#if 0
			cout << index1 << " " << index2 << endl;
#endif // 0


			for (size_t j = 0; j < 15; j++)
			{
				coficentesreq.at(j) = (((frequenciesreq[i] - table2.at(index1).at(0))*table2.at(index2).at(j + 1)) + ((table2.at(index2).at(0) - frequenciesreq[i])*table2.at(index1).at(j + 1))) / (table2.at(index2).at(0) - table2.at(index1).at(0));
			}
			results.at(i) = coficentesreq;
		}
	}

#if 1

	coefT2.open("C:/Users/Hugo Ninnanya/Documents/GibHub/aninanya/BOORE/BOORE/results/toro02/resultsT2.dat");
	coefT2 << "#Coefficents for differents frequencies (table2mcmm - Toro et al., 1997)" << endl;
	coefT2 << setw(WIDTH) << "c1" << setw(WIDTH) << "c2" << setw(WIDTH) << "c4" << setw(WIDTH) << "c5" << setw(WIDTH) << "c6" << setw(WIDTH) << "c7" << setw(WIDTH) << "c8" << setw(WIDTH) << "c10" << setw(WIDTH) << "P. sigma" << setw(WIDTH) << "T. sigma" << endl;

	for (size_t i = 0; i < periodsreq.size(); i++)
	{

		for (size_t j = 0; j < 15; j++)
			coefT2 << setw(WIDTH) << setprecision(6) << results.at(i).at(j);
		coefT2 << endl;
	}


#endif // 0

	cout << "NICE" << endl;
#endif // 0


	//--------------------------------------- FINISH -------------------------------------------------------

	//-------------------------- CHECKING ----------------------------------------
#if 1
	for (size_t i = 0; i < frequenciesreq.size(); i++)
	{
		for (size_t j = 0; j < 15; j++)
			cout << setw(WIDTH) << setprecision(6) << results.at(i).at(j);
		cout << endl;
	}

#endif // 0
	//----------------------- FINISH CHECKING -------------------------------------

	//---------------------- GENERATING VALUES -------------------------------

	Vector aceleraciones(NRAD);
	Vector distances(NRAD); //Rjb
	Vector magnitudes(NMAG);
	DMAG = (MSUP - MINF) / (NMAG - 1);
	DLRAD = (log10(RSUP) - log10(RINF)) / (NRAD - 1);


	for (size_t i = 0; i < NRAD; i++)
	{
		distances[i] = pow(10, log10(RINF) + i*DLRAD);
	}
	distances[NRAD - 1] = RSUP; //Changing last value
	for (size_t i = 0; i < NMAG; i++)
	{
		magnitudes[i] = MINF + i*DMAG;
	}
	magnitudes[NMAG - 1] = MSUP;//Changing last value

	//---------------------------- FINISH -----------------------------------
	//---------------------------- OUTPUT -----------------------------------
	//Value Type of distance
	//	1 (or blank) Focal
	//	2 Epicentral
	//	3 Joyner and Boore
	//	4 Closest to rupture area(Rrup)
	switch (OPTION2) {
	case 'A':
		TYPEMD = 3;
		break;
	case 'B':
		TYPEMD = 4;
		break;
	}
#if 0
	cout << "MAGNITUDES:" << endl;
	for (size_t i = 0; i < NMAG; i++)
	{
		cout << magnitudes[i] << endl;
	}
	cout << endl;
#endif // 0
#if 0
	cout << "DISTANCES:" << endl;
	for (size_t i = 0; i < NRAD; i++)
	{
		cout << distances[i] << endl;
	}
	cout << endl;
#endif // 0

	//OUTPUT 1
	ofstream attenueationtableT02;

	attenueationtableT02.open("C:/Users/Hugo Ninnanya/Documents/GibHub/aninanya/BOORE/BOORE/results/toro02/toro02.atn");

	attenueationtableT02 << setprecision(PRECISION2);
	//ab06 << setw(WIDTH) << "#" << setw(WIDTH) << ": Description" << setw(WIDTH) << ": Sample attenuation file constructed for illustration purposes (2008)" << endl;	
	//ab06 << setw(WIDTH) << "#" << setw(WIDTH) << ": Units" << setw(WIDTH) << ": cm/sec/sec" << endl;
	//ab06 << setw(WIDTH) << "#" << setw(WIDTH) << ": Distribution" << setw(WIDTH) << ": 2" << endl;
	//ab06 << setw(WIDTH) << "#" << setw(WIDTH) << ": Dimension" << setw(WIDTH) << ": Aceleration" << endl;
	attenueationtableT02 << setw(WIDTH) << MINF << setw(WIDTH) << MSUP << setw(WIDTH) << NMAG << endl;
	attenueationtableT02 << setw(WIDTH) << RINF << setw(WIDTH) << RSUP << setw(WIDTH) << NRAD << setw(WIDTH) << TYPEMD << endl;

	attenueationtableT02 << setprecision(PRECISION);

	for (size_t i = 0; i < periodsreq.size(); i++)//Loop over periods
	{
		attenueationtableT02 << setw(WIDTH) << periodsreq.at(i) << setw(WIDTH) << sigma << setw(WIDTH) << AMAX << endl;
		for (size_t j = 0; j < NMAG; j++)//Loop over magnitudes
		{


			for (size_t k = 0; k < NRAD; k++)//Loop over coeficents
			{
				switch (OPTION2) {
				case 'A':
					R = pow(pow(distances[k], 2) + pow(results.at(i).at(14), 2)*pow(e, 2 * (-1.25 + 0.227*magnitudes[j])), 0.5);
					break;
				case 'B':
					R = distances[k] + 0.089*pow(e, 0.6*magnitudes[j]);
					break;
				}
				A = results.at(i).at(0);
				B = results.at(i).at(1)*(magnitudes[j]-6.0);
				C = results.at(i).at(10)*pow((magnitudes[j] - 6.0),2);
				D = results.at(i).at(11)*log(R);
				E = (results.at(i).at(12)- results.at(i).at(11))*max(log(R/100.0),0.0);
				F = results.at(i).at(13)*R;
				aceleraciones[k] = pow(e, A + B + C - D - E -F);

				attenueationtableT02 << setw(WIDTH) << aceleraciones[k];//Saving values
			}
			attenueationtableT02 << endl;
		}
	}
	system("pause");
	return 0;
}